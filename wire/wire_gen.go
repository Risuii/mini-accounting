// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"mini-accounting/config"
	"mini-accounting/internal/counting/delivery/presenter/http"
	"mini-accounting/internal/counting/domain/usecase"
	"mini-accounting/internal/logging/data/repository"
	"mini-accounting/internal/logging/data/source"
	"mini-accounting/library"
	"mini-accounting/middlewares"
	"mini-accounting/pkg/custom_validation"
	"mini-accounting/pkg/data_sources/accounting_db"
	"mini-accounting/routes"
)

// Injectors from wire.go:

func InjectRoute(config2 config.Config, library2 library.Library) routes.Routes {
	engine := gin.New()
	accountingDB := uko_db.New(config2, library2)
	loggingPersistent := source.NewLoggingPersistent(accountingDB, library2)
	loggingRepository := repository.NewLoggingRepository(loggingPersistent, library2)
	middleware := middlewares.NewMiddleware(loggingRepository, config2, library2)
	countingUsecase := usecase.NewCountingUsecase(library2)
	customValidation := custom_validation.NewCustomValidation(config2, library2)
	countingHandler := http.NewCountingHandler(library2, countingUsecase, customValidation)
	routesRoutes := routes.New(engine, library2, middleware, countingHandler)
	return routesRoutes
}

// wire.go:

var ProviderSet = wire.NewSet(gin.New, custom_validation.NewCustomValidation, uko_db.New, source.NewLoggingPersistent, repository.NewLoggingRepository, usecase.NewCountingUsecase, http.NewCountingHandler, middlewares.NewMiddleware, routes.New)
